import React, { useState, useEffect, useRef } from 'react';
import styles from './panel.scss';
import { Icon } from '@blueprintjs/core';
export const PanelContext = React.createContext({ state: {}, setState: () => { } });
export const Panel = function ({ contentsRef, className, collapsedClassName, titleBarClassName, contentsClassName, title, TitleComponent, TitleComponentSecondary, iconCollapsed, iconExpanded, isCollapsible, isCollapsedByDefault, children }) {
    const [isCollapsed, setCollapsedState] = useState(isCollapsedByDefault || false);
    const [panelState, setPanelState] = useState({});
    function onCollapse() {
        setCollapsedState(true);
    }
    function onExpand() {
        setCollapsedState(false);
    }
    const divRef = useRef(null);
    useEffect(() => {
        if (contentsRef && divRef.current) {
            contentsRef(divRef.current);
        }
    });
    const toggleIcon = isCollapsed
        ? (iconCollapsed || 'caret-right')
        : (iconExpanded || 'caret-down');
    return (React.createElement("div", { className: `
        ${className || ''}
        ${styles.panel}
        ${isCollapsible === true ? styles.panelCollapsible : ''}
        ${isCollapsible === true && isCollapsed === true
            ? `${styles.panelCollapsed} ${collapsedClassName}`
            : ''}` },
        React.createElement(PanelContext.Provider, { value: {
                state: panelState,
                setState: setPanelState,
            } },
            title || TitleComponent || isCollapsible
                ? React.createElement("div", { className: `${styles.panelTitleBar} ${titleBarClassName}`, onClick: (isCollapsible === true && isCollapsed === false)
                        ? onCollapse
                        : onExpand },
                    isCollapsible
                        ? React.createElement(Icon, { className: styles.panelTriggerIcon, icon: isCollapsible ? toggleIcon : 'blank' })
                        : null,
                    title || TitleComponent
                        ? React.createElement(React.Fragment, null,
                            React.createElement("span", { className: styles.title }, TitleComponent
                                ? React.createElement(TitleComponent, { isCollapsed: isCollapsed })
                                : title),
                            React.createElement("span", { className: styles.titleSecondary }, TitleComponentSecondary
                                ? React.createElement(TitleComponentSecondary, { isCollapsed: isCollapsed })
                                : null))
                        : null)
                : null,
            isCollapsible && isCollapsed
                ? null
                : React.createElement("div", { ref: divRef, className: `${styles.panelContents} ${contentsClassName}` }, children))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGFuZWwudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFM0QsT0FBTyxNQUFNLE1BQU0sY0FBYyxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUd6QyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQ3ZCLEtBQUssQ0FBQyxhQUFhLENBQ2xCLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQXFCdEMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUF5QixVQUFVLEVBQ2pELFdBQVcsRUFDWCxTQUFTLEVBQUUsa0JBQWtCLEVBQzdCLGlCQUFpQixFQUNqQixpQkFBaUIsRUFFakIsS0FBSyxFQUFFLGNBQWMsRUFBRSx1QkFBdUIsRUFDOUMsYUFBYSxFQUFFLFlBQVksRUFDM0IsYUFBYSxFQUFFLG9CQUFvQixFQUNuQyxRQUFRLEVBQUU7SUFFWixNQUFNLENBQUMsV0FBVyxFQUFFLGlCQUFpQixDQUFDLEdBQ3BDLFFBQVEsQ0FBVSxvQkFBb0IsSUFBSSxLQUFLLENBQUMsQ0FBQztJQUVuRCxNQUFNLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxHQUFHLFFBQVEsQ0FBUyxFQUFFLENBQUMsQ0FBQztJQUV6RCxTQUFTLFVBQVU7UUFDakIsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUNELFNBQVMsUUFBUTtRQUNmLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQXdCLElBQUksQ0FBQyxDQUFDO0lBRW5ELFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixJQUFJLFdBQVcsSUFBSSxNQUFNLENBQUMsT0FBTyxFQUFFO1lBQ2pDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sVUFBVSxHQUFhLFdBQVc7UUFDdEMsQ0FBQyxDQUFDLENBQUMsYUFBYSxJQUFJLGFBQWEsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQyxZQUFZLElBQUksWUFBWSxDQUFDLENBQUM7SUFFbkMsT0FBTyxDQUNMLDZCQUFLLFNBQVMsRUFBRTtVQUNWLFNBQVMsSUFBSSxFQUFFO1VBQ2YsTUFBTSxDQUFDLEtBQUs7VUFDWixhQUFhLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUU7VUFDckQsYUFBYSxLQUFLLElBQUksSUFBSSxXQUFXLEtBQUssSUFBSTtZQUM1QyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsY0FBYyxJQUFJLGtCQUFrQixFQUFFO1lBQ2xELENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFFWixvQkFBQyxZQUFZLENBQUMsUUFBUSxJQUFDLEtBQUssRUFBRTtnQkFDMUIsS0FBSyxFQUFFLFVBQVU7Z0JBQ2pCLFFBQVEsRUFBRSxhQUFhO2FBQ3hCO1lBRUEsS0FBSyxJQUFJLGNBQWMsSUFBSSxhQUFhO2dCQUN2QyxDQUFDLENBQUMsNkJBQ0ksU0FBUyxFQUFFLEdBQUcsTUFBTSxDQUFDLGFBQWEsSUFBSSxpQkFBaUIsRUFBRSxFQUN6RCxPQUFPLEVBQUUsQ0FBQyxhQUFhLEtBQUssSUFBSSxJQUFJLFdBQVcsS0FBSyxLQUFLLENBQUM7d0JBQ3hELENBQUMsQ0FBQyxVQUFVO3dCQUNaLENBQUMsQ0FBQyxRQUFRO29CQUViLGFBQWE7d0JBQ1osQ0FBQyxDQUFDLG9CQUFDLElBQUksSUFDSCxTQUFTLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixFQUNsQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FDMUM7d0JBQ0osQ0FBQyxDQUFDLElBQUk7b0JBRVAsS0FBSyxJQUFJLGNBQWM7d0JBQ3RCLENBQUMsQ0FBQzs0QkFDRSw4QkFBTSxTQUFTLEVBQUUsTUFBTSxDQUFDLEtBQUssSUFDMUIsY0FBYztnQ0FDYixDQUFDLENBQUMsb0JBQUMsY0FBYyxJQUFDLFdBQVcsRUFBRSxXQUFXLEdBQUk7Z0NBQzlDLENBQUMsQ0FBQyxLQUFLLENBQ0o7NEJBQ1AsOEJBQU0sU0FBUyxFQUFFLE1BQU0sQ0FBQyxjQUFjLElBQ25DLHVCQUF1QjtnQ0FDdEIsQ0FBQyxDQUFDLG9CQUFDLHVCQUF1QixJQUFDLFdBQVcsRUFBRSxXQUFXLEdBQUk7Z0NBQ3ZELENBQUMsQ0FBQyxJQUFJLENBQ0gsQ0FDTjt3QkFDTCxDQUFDLENBQUMsSUFBSSxDQUNKO2dCQUNSLENBQUMsQ0FBQyxJQUFJO1lBRVAsYUFBYSxJQUFJLFdBQVc7Z0JBQzNCLENBQUMsQ0FBQyxJQUFJO2dCQUNOLENBQUMsQ0FBQyw2QkFBSyxHQUFHLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxhQUFhLElBQUksaUJBQWlCLEVBQUUsSUFDeEUsUUFBUSxDQUNMLENBRVksQ0FDcEIsQ0FDUCxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb25OYW1lIH0gZnJvbSAnQGJsdWVwcmludGpzL2ljb25zJztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9wYW5lbC5zY3NzJztcbmltcG9ydCB7IEljb24gfSBmcm9tICdAYmx1ZXByaW50anMvY29yZSc7XG5cblxuZXhwb3J0IGNvbnN0IFBhbmVsQ29udGV4dCA9XG4gIFJlYWN0LmNyZWF0ZUNvbnRleHQ8eyBzdGF0ZTogYW55LCBzZXRTdGF0ZTogKG9wdHM6IGFueSkgPT4gdm9pZCB9PlxuICAoeyBzdGF0ZToge30sIHNldFN0YXRlOiAoKSA9PiB7fSB9KTtcblxuXG5leHBvcnQgaW50ZXJmYWNlIFBhbmVsUHJvcHMge1xuICBjb250ZW50c1JlZj86IChlbDogSFRNTERpdkVsZW1lbnQpID0+IHZvaWQsXG5cbiAgdGl0bGU/OiBzdHJpbmdcbiAgVGl0bGVDb21wb25lbnQ/OiBSZWFjdC5GQzx7IGlzQ29sbGFwc2VkPzogYm9vbGVhbiB9PlxuICBUaXRsZUNvbXBvbmVudFNlY29uZGFyeT86IFJlYWN0LkZDPHsgaXNDb2xsYXBzZWQ/OiBib29sZWFuIH0+XG5cbiAgaXNDb2xsYXBzaWJsZT86IHRydWVcbiAgaXNDb2xsYXBzZWRCeURlZmF1bHQ/OiB0cnVlXG5cbiAgY2xhc3NOYW1lPzogc3RyaW5nXG4gIGNvbGxhcHNlZENsYXNzTmFtZT86IHN0cmluZ1xuICB0aXRsZUJhckNsYXNzTmFtZT86IHN0cmluZ1xuICBjb250ZW50c0NsYXNzTmFtZT86IHN0cmluZ1xuXG4gIGljb25Db2xsYXBzZWQ/OiBJY29uTmFtZVxuICBpY29uRXhwYW5kZWQ/OiBJY29uTmFtZVxufVxuZXhwb3J0IGNvbnN0IFBhbmVsOiBSZWFjdC5GQzxQYW5lbFByb3BzPiA9IGZ1bmN0aW9uICh7XG4gICAgY29udGVudHNSZWYsXG4gICAgY2xhc3NOYW1lLCBjb2xsYXBzZWRDbGFzc05hbWUsXG4gICAgdGl0bGVCYXJDbGFzc05hbWUsXG4gICAgY29udGVudHNDbGFzc05hbWUsXG5cbiAgICB0aXRsZSwgVGl0bGVDb21wb25lbnQsIFRpdGxlQ29tcG9uZW50U2Vjb25kYXJ5LFxuICAgIGljb25Db2xsYXBzZWQsIGljb25FeHBhbmRlZCxcbiAgICBpc0NvbGxhcHNpYmxlLCBpc0NvbGxhcHNlZEJ5RGVmYXVsdCxcbiAgICBjaGlsZHJlbiB9KSB7XG5cbiAgY29uc3QgW2lzQ29sbGFwc2VkLCBzZXRDb2xsYXBzZWRTdGF0ZV0gPVxuICAgIHVzZVN0YXRlPGJvb2xlYW4+KGlzQ29sbGFwc2VkQnlEZWZhdWx0IHx8IGZhbHNlKTtcblxuICBjb25zdCBbcGFuZWxTdGF0ZSwgc2V0UGFuZWxTdGF0ZV0gPSB1c2VTdGF0ZTxvYmplY3Q+KHt9KTtcblxuICBmdW5jdGlvbiBvbkNvbGxhcHNlKCkge1xuICAgIHNldENvbGxhcHNlZFN0YXRlKHRydWUpO1xuICB9XG4gIGZ1bmN0aW9uIG9uRXhwYW5kKCkge1xuICAgIHNldENvbGxhcHNlZFN0YXRlKGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGRpdlJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudCB8IG51bGw+KG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGNvbnRlbnRzUmVmICYmIGRpdlJlZi5jdXJyZW50KSB7XG4gICAgICBjb250ZW50c1JlZihkaXZSZWYuY3VycmVudCk7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCB0b2dnbGVJY29uOiBJY29uTmFtZSA9IGlzQ29sbGFwc2VkXG4gICAgPyAoaWNvbkNvbGxhcHNlZCB8fCAnY2FyZXQtcmlnaHQnKVxuICAgIDogKGljb25FeHBhbmRlZCB8fCAnY2FyZXQtZG93bicpO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2BcbiAgICAgICAgJHtjbGFzc05hbWUgfHwgJyd9XG4gICAgICAgICR7c3R5bGVzLnBhbmVsfVxuICAgICAgICAke2lzQ29sbGFwc2libGUgPT09IHRydWUgPyBzdHlsZXMucGFuZWxDb2xsYXBzaWJsZSA6ICcnfVxuICAgICAgICAke2lzQ29sbGFwc2libGUgPT09IHRydWUgJiYgaXNDb2xsYXBzZWQgPT09IHRydWVcbiAgICAgICAgICAgID8gYCR7c3R5bGVzLnBhbmVsQ29sbGFwc2VkfSAke2NvbGxhcHNlZENsYXNzTmFtZX1gXG4gICAgICAgICAgICA6ICcnfWB9PlxuXG4gICAgICA8UGFuZWxDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7XG4gICAgICAgICAgc3RhdGU6IHBhbmVsU3RhdGUsXG4gICAgICAgICAgc2V0U3RhdGU6IHNldFBhbmVsU3RhdGUsXG4gICAgICAgIH19PlxuXG4gICAgICAgIHt0aXRsZSB8fCBUaXRsZUNvbXBvbmVudCB8fCBpc0NvbGxhcHNpYmxlXG4gICAgICAgICAgPyA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgJHtzdHlsZXMucGFuZWxUaXRsZUJhcn0gJHt0aXRsZUJhckNsYXNzTmFtZX1gfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eyhpc0NvbGxhcHNpYmxlID09PSB0cnVlICYmIGlzQ29sbGFwc2VkID09PSBmYWxzZSlcbiAgICAgICAgICAgICAgICAgID8gb25Db2xsYXBzZVxuICAgICAgICAgICAgICAgICAgOiBvbkV4cGFuZH0+XG5cbiAgICAgICAgICAgICAge2lzQ29sbGFwc2libGVcbiAgICAgICAgICAgICAgICA/IDxJY29uXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLnBhbmVsVHJpZ2dlckljb259XG4gICAgICAgICAgICAgICAgICAgIGljb249e2lzQ29sbGFwc2libGUgPyB0b2dnbGVJY29uIDogJ2JsYW5rJ31cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgOiBudWxsfVxuXG4gICAgICAgICAgICAgIHt0aXRsZSB8fCBUaXRsZUNvbXBvbmVudFxuICAgICAgICAgICAgICAgID8gPD5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtzdHlsZXMudGl0bGV9PlxuICAgICAgICAgICAgICAgICAgICAgIHtUaXRsZUNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgPyA8VGl0bGVDb21wb25lbnQgaXNDb2xsYXBzZWQ9e2lzQ29sbGFwc2VkfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aXRsZX1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy50aXRsZVNlY29uZGFyeX0+XG4gICAgICAgICAgICAgICAgICAgICAge1RpdGxlQ29tcG9uZW50U2Vjb25kYXJ5XG4gICAgICAgICAgICAgICAgICAgICAgICA/IDxUaXRsZUNvbXBvbmVudFNlY29uZGFyeSBpc0NvbGxhcHNlZD17aXNDb2xsYXBzZWR9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGx9XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgIDogbnVsbH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDogbnVsbH1cblxuICAgICAgICB7aXNDb2xsYXBzaWJsZSAmJiBpc0NvbGxhcHNlZFxuICAgICAgICAgID8gbnVsbFxuICAgICAgICAgIDogPGRpdiByZWY9e2RpdlJlZn0gY2xhc3NOYW1lPXtgJHtzdHlsZXMucGFuZWxDb250ZW50c30gJHtjb250ZW50c0NsYXNzTmFtZX1gfT5cbiAgICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgICAgPC9kaXY+fVxuXG4gICAgICA8L1BhbmVsQ29udGV4dC5Qcm92aWRlcj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG4iXX0=