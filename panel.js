import React, { useState } from 'react';
import styles from './panel.scss';
import { Icon } from '@blueprintjs/core';
export const PanelContext = React.createContext({ state: {}, setState: () => { } });
export const Panel = function ({ className, collapsedClassName, titleBarClassName, contentsClassName, title, TitleComponent, TitleComponentSecondary, iconCollapsed, iconExpanded, isCollapsible, isCollapsedByDefault, children }) {
    const [isCollapsed, setCollapsedState] = useState(isCollapsedByDefault || false);
    const [panelState, setPanelState] = useState({});
    function onCollapse() {
        setCollapsedState(true);
    }
    function onExpand() {
        setCollapsedState(false);
    }
    const toggleIcon = isCollapsed
        ? (iconCollapsed || 'caret-right')
        : (iconExpanded || 'caret-down');
    return (React.createElement("div", { className: `
        ${className || ''}
        ${styles.panel}
        ${isCollapsible === true ? styles.panelCollapsible : ''}
        ${isCollapsible === true && isCollapsed === true
            ? `${styles.panelCollapsed} ${collapsedClassName}`
            : ''}` },
        React.createElement(PanelContext.Provider, { value: {
                state: panelState,
                setState: setPanelState,
            } },
            title || TitleComponent || isCollapsible
                ? React.createElement("div", { className: `${styles.panelTitleBar} ${titleBarClassName}`, onClick: (isCollapsible === true && isCollapsed === false)
                        ? onCollapse
                        : onExpand },
                    React.createElement(Icon, { className: styles.panelTriggerIcon, icon: isCollapsible ? toggleIcon : 'blank' }),
                    title || TitleComponent
                        ? React.createElement(React.Fragment, null,
                            React.createElement("span", { className: styles.title }, TitleComponent
                                ? React.createElement(TitleComponent, { isCollapsed: isCollapsed })
                                : title),
                            React.createElement("span", { className: styles.titleSecondary }, TitleComponentSecondary
                                ? React.createElement(TitleComponentSecondary, { isCollapsed: isCollapsed })
                                : null))
                        : null)
                : null,
            isCollapsible && isCollapsed
                ? null
                : React.createElement("div", { className: `${styles.panelContents} ${contentsClassName}` }, children))));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFuZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGFuZWwudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRXhDLE9BQU8sTUFBTSxNQUFNLGNBQWMsQ0FBQztBQUNsQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHekMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUN2QixLQUFLLENBQUMsYUFBYSxDQUNsQixFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFtQnRDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBeUIsVUFBVSxFQUNqRCxTQUFTLEVBQUUsa0JBQWtCLEVBQzdCLGlCQUFpQixFQUNqQixpQkFBaUIsRUFFakIsS0FBSyxFQUFFLGNBQWMsRUFBRSx1QkFBdUIsRUFDOUMsYUFBYSxFQUFFLFlBQVksRUFDM0IsYUFBYSxFQUFFLG9CQUFvQixFQUNuQyxRQUFRLEVBQUU7SUFFWixNQUFNLENBQUMsV0FBVyxFQUFFLGlCQUFpQixDQUFDLEdBQ3BDLFFBQVEsQ0FBVSxvQkFBb0IsSUFBSSxLQUFLLENBQUMsQ0FBQztJQUVuRCxNQUFNLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxHQUFHLFFBQVEsQ0FBUyxFQUFFLENBQUMsQ0FBQztJQUV6RCxTQUFTLFVBQVU7UUFDakIsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUNELFNBQVMsUUFBUTtRQUNmLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxNQUFNLFVBQVUsR0FBYSxXQUFXO1FBQ3RDLENBQUMsQ0FBQyxDQUFDLGFBQWEsSUFBSSxhQUFhLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUMsWUFBWSxJQUFJLFlBQVksQ0FBQyxDQUFDO0lBRW5DLE9BQU8sQ0FDTCw2QkFBSyxTQUFTLEVBQUU7VUFDVixTQUFTLElBQUksRUFBRTtVQUNmLE1BQU0sQ0FBQyxLQUFLO1VBQ1osYUFBYSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUFFO1VBQ3JELGFBQWEsS0FBSyxJQUFJLElBQUksV0FBVyxLQUFLLElBQUk7WUFDNUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLGNBQWMsSUFBSSxrQkFBa0IsRUFBRTtZQUNsRCxDQUFDLENBQUMsRUFBRSxFQUFFO1FBRVosb0JBQUMsWUFBWSxDQUFDLFFBQVEsSUFBQyxLQUFLLEVBQUU7Z0JBQzFCLEtBQUssRUFBRSxVQUFVO2dCQUNqQixRQUFRLEVBQUUsYUFBYTthQUN4QjtZQUVBLEtBQUssSUFBSSxjQUFjLElBQUksYUFBYTtnQkFDdkMsQ0FBQyxDQUFDLDZCQUNJLFNBQVMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxhQUFhLElBQUksaUJBQWlCLEVBQUUsRUFDekQsT0FBTyxFQUFFLENBQUMsYUFBYSxLQUFLLElBQUksSUFBSSxXQUFXLEtBQUssS0FBSyxDQUFDO3dCQUN4RCxDQUFDLENBQUMsVUFBVTt3QkFDWixDQUFDLENBQUMsUUFBUTtvQkFFZCxvQkFBQyxJQUFJLElBQ0gsU0FBUyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsRUFDbEMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQzFDO29CQUVELEtBQUssSUFBSSxjQUFjO3dCQUN0QixDQUFDLENBQUM7NEJBQ0UsOEJBQU0sU0FBUyxFQUFFLE1BQU0sQ0FBQyxLQUFLLElBQzFCLGNBQWM7Z0NBQ2IsQ0FBQyxDQUFDLG9CQUFDLGNBQWMsSUFBQyxXQUFXLEVBQUUsV0FBVyxHQUFJO2dDQUM5QyxDQUFDLENBQUMsS0FBSyxDQUNKOzRCQUNQLDhCQUFNLFNBQVMsRUFBRSxNQUFNLENBQUMsY0FBYyxJQUNuQyx1QkFBdUI7Z0NBQ3RCLENBQUMsQ0FBQyxvQkFBQyx1QkFBdUIsSUFBQyxXQUFXLEVBQUUsV0FBVyxHQUFJO2dDQUN2RCxDQUFDLENBQUMsSUFBSSxDQUNILENBQ047d0JBQ0wsQ0FBQyxDQUFDLElBQUksQ0FDSjtnQkFDUixDQUFDLENBQUMsSUFBSTtZQUVQLGFBQWEsSUFBSSxXQUFXO2dCQUMzQixDQUFDLENBQUMsSUFBSTtnQkFDTixDQUFDLENBQUMsNkJBQUssU0FBUyxFQUFFLEdBQUcsTUFBTSxDQUFDLGFBQWEsSUFBSSxpQkFBaUIsRUFBRSxJQUMzRCxRQUFRLENBQ0wsQ0FFWSxDQUNwQixDQUNQLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJY29uTmFtZSB9IGZyb20gJ0BibHVlcHJpbnRqcy9pY29ucyc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vcGFuZWwuc2Nzcyc7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnQGJsdWVwcmludGpzL2NvcmUnO1xuXG5cbmV4cG9ydCBjb25zdCBQYW5lbENvbnRleHQgPVxuICBSZWFjdC5jcmVhdGVDb250ZXh0PHsgc3RhdGU6IGFueSwgc2V0U3RhdGU6IChvcHRzOiBhbnkpID0+IHZvaWQgfT5cbiAgKHsgc3RhdGU6IHt9LCBzZXRTdGF0ZTogKCkgPT4ge30gfSk7XG5cblxuaW50ZXJmYWNlIFBhbmVsUHJvcHMge1xuICB0aXRsZT86IHN0cmluZ1xuICBUaXRsZUNvbXBvbmVudD86IFJlYWN0LkZDPHsgaXNDb2xsYXBzZWQ/OiBib29sZWFuIH0+XG4gIFRpdGxlQ29tcG9uZW50U2Vjb25kYXJ5PzogUmVhY3QuRkM8eyBpc0NvbGxhcHNlZD86IGJvb2xlYW4gfT5cblxuICBpc0NvbGxhcHNpYmxlPzogdHJ1ZVxuICBpc0NvbGxhcHNlZEJ5RGVmYXVsdD86IHRydWVcblxuICBjbGFzc05hbWU/OiBzdHJpbmdcbiAgY29sbGFwc2VkQ2xhc3NOYW1lPzogc3RyaW5nXG4gIHRpdGxlQmFyQ2xhc3NOYW1lPzogc3RyaW5nXG4gIGNvbnRlbnRzQ2xhc3NOYW1lPzogc3RyaW5nXG5cbiAgaWNvbkNvbGxhcHNlZD86IEljb25OYW1lXG4gIGljb25FeHBhbmRlZD86IEljb25OYW1lXG59XG5leHBvcnQgY29uc3QgUGFuZWw6IFJlYWN0LkZDPFBhbmVsUHJvcHM+ID0gZnVuY3Rpb24gKHtcbiAgICBjbGFzc05hbWUsIGNvbGxhcHNlZENsYXNzTmFtZSxcbiAgICB0aXRsZUJhckNsYXNzTmFtZSxcbiAgICBjb250ZW50c0NsYXNzTmFtZSxcblxuICAgIHRpdGxlLCBUaXRsZUNvbXBvbmVudCwgVGl0bGVDb21wb25lbnRTZWNvbmRhcnksXG4gICAgaWNvbkNvbGxhcHNlZCwgaWNvbkV4cGFuZGVkLFxuICAgIGlzQ29sbGFwc2libGUsIGlzQ29sbGFwc2VkQnlEZWZhdWx0LFxuICAgIGNoaWxkcmVuIH0pIHtcblxuICBjb25zdCBbaXNDb2xsYXBzZWQsIHNldENvbGxhcHNlZFN0YXRlXSA9XG4gICAgdXNlU3RhdGU8Ym9vbGVhbj4oaXNDb2xsYXBzZWRCeURlZmF1bHQgfHwgZmFsc2UpO1xuXG4gIGNvbnN0IFtwYW5lbFN0YXRlLCBzZXRQYW5lbFN0YXRlXSA9IHVzZVN0YXRlPG9iamVjdD4oe30pO1xuXG4gIGZ1bmN0aW9uIG9uQ29sbGFwc2UoKSB7XG4gICAgc2V0Q29sbGFwc2VkU3RhdGUodHJ1ZSk7XG4gIH1cbiAgZnVuY3Rpb24gb25FeHBhbmQoKSB7XG4gICAgc2V0Q29sbGFwc2VkU3RhdGUoZmFsc2UpO1xuICB9XG5cbiAgY29uc3QgdG9nZ2xlSWNvbjogSWNvbk5hbWUgPSBpc0NvbGxhcHNlZFxuICAgID8gKGljb25Db2xsYXBzZWQgfHwgJ2NhcmV0LXJpZ2h0JylcbiAgICA6IChpY29uRXhwYW5kZWQgfHwgJ2NhcmV0LWRvd24nKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgXG4gICAgICAgICR7Y2xhc3NOYW1lIHx8ICcnfVxuICAgICAgICAke3N0eWxlcy5wYW5lbH1cbiAgICAgICAgJHtpc0NvbGxhcHNpYmxlID09PSB0cnVlID8gc3R5bGVzLnBhbmVsQ29sbGFwc2libGUgOiAnJ31cbiAgICAgICAgJHtpc0NvbGxhcHNpYmxlID09PSB0cnVlICYmIGlzQ29sbGFwc2VkID09PSB0cnVlXG4gICAgICAgICAgICA/IGAke3N0eWxlcy5wYW5lbENvbGxhcHNlZH0gJHtjb2xsYXBzZWRDbGFzc05hbWV9YFxuICAgICAgICAgICAgOiAnJ31gfT5cblxuICAgICAgPFBhbmVsQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e1xuICAgICAgICAgIHN0YXRlOiBwYW5lbFN0YXRlLFxuICAgICAgICAgIHNldFN0YXRlOiBzZXRQYW5lbFN0YXRlLFxuICAgICAgICB9fT5cblxuICAgICAgICB7dGl0bGUgfHwgVGl0bGVDb21wb25lbnQgfHwgaXNDb2xsYXBzaWJsZVxuICAgICAgICAgID8gPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YCR7c3R5bGVzLnBhbmVsVGl0bGVCYXJ9ICR7dGl0bGVCYXJDbGFzc05hbWV9YH1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoaXNDb2xsYXBzaWJsZSA9PT0gdHJ1ZSAmJiBpc0NvbGxhcHNlZCA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICA/IG9uQ29sbGFwc2VcbiAgICAgICAgICAgICAgICAgIDogb25FeHBhbmR9PlxuXG4gICAgICAgICAgICAgIDxJY29uXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMucGFuZWxUcmlnZ2VySWNvbn1cbiAgICAgICAgICAgICAgICBpY29uPXtpc0NvbGxhcHNpYmxlID8gdG9nZ2xlSWNvbiA6ICdibGFuayd9XG4gICAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgICAge3RpdGxlIHx8IFRpdGxlQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgPyA8PlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9e3N0eWxlcy50aXRsZX0+XG4gICAgICAgICAgICAgICAgICAgICAge1RpdGxlQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICA/IDxUaXRsZUNvbXBvbmVudCBpc0NvbGxhcHNlZD17aXNDb2xsYXBzZWR9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRpdGxlfVxuICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT17c3R5bGVzLnRpdGxlU2Vjb25kYXJ5fT5cbiAgICAgICAgICAgICAgICAgICAgICB7VGl0bGVDb21wb25lbnRTZWNvbmRhcnlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gPFRpdGxlQ29tcG9uZW50U2Vjb25kYXJ5IGlzQ29sbGFwc2VkPXtpc0NvbGxhcHNlZH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgOiBudWxsfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgOiBudWxsfVxuXG4gICAgICAgIHtpc0NvbGxhcHNpYmxlICYmIGlzQ29sbGFwc2VkXG4gICAgICAgICAgPyBudWxsXG4gICAgICAgICAgOiA8ZGl2IGNsYXNzTmFtZT17YCR7c3R5bGVzLnBhbmVsQ29udGVudHN9ICR7Y29udGVudHNDbGFzc05hbWV9YH0+XG4gICAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICAgIDwvZGl2Pn1cblxuICAgICAgPC9QYW5lbENvbnRleHQuUHJvdmlkZXI+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIl19