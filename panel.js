import React, { useState, useEffect, useRef } from 'react';
import styles from './panel.scss';
import { Icon } from '@blueprintjs/core';
export const PanelContext = React.createContext({ state: {}, setState: () => { } });
export const Panel = React.forwardRef(function Panel({ contentsRef, className, collapsedClassName, titleBarClassName, contentsClassName, title, TitleComponent, TitleComponentSecondary, iconCollapsed, iconExpanded, isCollapsible, isCollapsedByDefault, children }, wrapperRef) {
    const [isCollapsed, setCollapsedState] = useState(isCollapsedByDefault || false);
    const [panelState, setPanelState] = useState({});
    function onCollapse() {
        setCollapsedState(true);
    }
    function onExpand() {
        setCollapsedState(false);
    }
    const _contentsRef = useRef(null);
    useEffect(() => {
        if (contentsRef && _contentsRef.current) {
            contentsRef(_contentsRef.current);
        }
    });
    const toggleIcon = isCollapsed
        ? (iconCollapsed || 'caret-right')
        : (iconExpanded || 'caret-down');
    return (React.createElement("div", { ref: wrapperRef, className: `
          ${className || ''}
          ${styles.panel}
          ${isCollapsible === true ? styles.panelCollapsible : ''}
          ${isCollapsible === true && isCollapsed === true
            ? `${styles.panelCollapsed} ${collapsedClassName}`
            : ''}` },
        React.createElement(PanelContext.Provider, { value: {
                state: panelState,
                setState: setPanelState,
            } },
            title || TitleComponent || isCollapsible
                ? React.createElement("div", { className: `${styles.panelTitleBar} ${titleBarClassName}`, onClick: (isCollapsible === true && isCollapsed === false)
                        ? onCollapse
                        : onExpand },
                    isCollapsible
                        ? React.createElement(Icon, { className: styles.panelTriggerIcon, icon: isCollapsible ? toggleIcon : 'blank' })
                        : null,
                    title || TitleComponent
                        ? React.createElement(React.Fragment, null,
                            React.createElement("span", { className: styles.title }, TitleComponent
                                ? React.createElement(TitleComponent, { isCollapsed: isCollapsed })
                                : title),
                            React.createElement("span", { className: styles.titleSecondary }, TitleComponentSecondary
                                ? React.createElement(TitleComponentSecondary, { isCollapsed: isCollapsed })
                                : null))
                        : null)
                : null,
            isCollapsible && isCollapsed
                ? null
                : React.createElement("div", { ref: _contentsRef, className: `${styles.panelContents} ${contentsClassName}` }, children))));
});
//# sourceMappingURL=data:application/json;base64,